# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpatialInteractionModels
                                 A QGIS plugin
 Este plugin calcula 3 modelos de interacción espacial y son: restricción en el origen, restricción en el destino y los doblemente restrictivos.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Adonai Emmanuel Nicanor Bautista
        email                : djnonasrm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .spatial_interaction_models_dialog import SpatialInteractionModelsDialog
import os.path
from qgis.core import * #type:ignore
from PyQt5.QtWidgets import * #type:ignore
from qgis.gui import * #type:ignore
from PyQt5.QtGui import * #type:ignore
from PyQt5.QtCore import QSettings
from PyQt5 import * #type:ignore
import sys
import os
import time
from .about_dialog import Ui_DialogBase
from pathlib import PureWindowsPath

sys.path.insert(0, os.path.dirname(__file__) + os.sep + "SIM/")
from Main import Main #type:ignore

class SpatialInteractionModels:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SpatialInteractionModels_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Modelos de Interacción Espacial')

        self.action = None
        self.toolbar = self.iface.addToolBar(u'SpatialInteractionModels')
        self.toolbar.setObjectName(u'SpatialInteractionModels')
        self.dlg = SpatialInteractionModelsDialog()
        self.dlg2 = Ui_DialogBase()
        self.connections()


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SpatialInteractionModels', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/spatial_interaction_models/test1.png'
        icon = QIcon(icon_path)
        self.action = QAction(icon,u'&Modelos de Interacción Espacial',self.iface.mainWindow())
        self.action.setEnabled(True)
        self.toolbar.addAction(self.action)
        self.action.triggered.connect(self.run)
        self.iface.addPluginToMenu(self.menu,self.action)
        self.actions.append(self.action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Modelos de Interacción Espacial'),
                action)
            self.iface.removeToolBarIcon(action)
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""

        self.clear_and_start()
        self.dlg.show()
        self.dlg.exec_()
    
    def load_origin(self):
        path_layer = QFileDialog.getOpenFileName(self.dlg, "Selecciona un archivo vectorial de orígen", "", "*.shp")
        if(path_layer[0] != ""):
            sp = path_layer[0].split("/")
            name = sp[-1].split(".shp")[0]
            layer = QgsVectorLayer(path_layer[0], name , "ogr")
            if layer.isValid():
                geometry_type = layer.geometryType()
                if geometry_type == QgsWkbTypes.PointGeometry or geometry_type == QgsWkbTypes.PolygonGeometry:
                    QgsProject.instance().addMapLayer(layer)
                    self.dlg.origin_combobox.setLayer(layer)
                else:
                    self.dlg.origin_combobox.setLayer(None)
                    self.dlg.origin_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    self.set_message("Error",f"Se requiere un archivo vectorial de puntos o polígonos", QMessageBox.Critical)
    
    def load_dest(self):
        path_layer = QFileDialog.getOpenFileName(self.dlg, "Selecciona un archivo vectorial de destino", "", "*.shp")
        if(path_layer[0] != ""):
            sp = path_layer[0].split("/")
            name = sp[-1].split(".shp")[0]
            layer = QgsVectorLayer(path_layer[0], name , "ogr")
            if layer.isValid():
                geometry_type = layer.geometryType()
                if geometry_type == QgsWkbTypes.PointGeometry:
                    QgsProject.instance().addMapLayer(layer)
                    self.dlg.dest_combobox.setLayer(layer)
                else:
                    self.dlg.dest_combobox.setLayer(None)
                    self.dlg.dest_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    self.set_message("Error",f"Se requiere un archivo vectorial de puntos", QMessageBox.Critical)

    def clear_and_start(self):
        # TABS
        self.dlg.tabWidget.setTabEnabled(0,True)
        self.dlg.tabWidget.setTabEnabled(1,False)
        self.dlg.tabWidget.setTabEnabled(2,False)

        # Clear all inputs
        self.dlg.val2_dist.setStyleSheet("")
        self.dlg.val2_fluj.setStyleSheet("")

        # inputs
        self.dlg.origin_combobox.setStyleSheet("")
        self.dlg.id_origin_combobox.setStyleSheet("")
        self.dlg.field_origin_combobox.setStyleSheet("")

        self.dlg.dest_combobox.setStyleSheet("")
        self.dlg.id_dest_combobox.setStyleSheet("")
        self.dlg.field_dest_combobox.setStyleSheet("")

        # Restrictions

        self.dlg.tabWidget.setCurrentIndex(0)
        # Origin
        self.dlg.origin_combobox.setFilters(QgsMapLayerProxyModel.PointLayer|QgsMapLayerProxyModel.PolygonLayer)
        self.dlg.origin_combobox.setCurrentIndex(-1)
        self.dlg.id_origin_combobox.setLayer(None)
        self.dlg.field_origin_combobox.setLayer(None)

        self.dlg.id_origin_combobox.setFilters(QgsFieldProxyModel.String|
                                            QgsFieldProxyModel.Int|
                                            QgsFieldProxyModel.Double|
                                            QgsFieldProxyModel.Numeric|
                                            QgsFieldProxyModel.LongLong)

        self.dlg.field_origin_combobox.setFilters(QgsFieldProxyModel.Int|
                                            QgsFieldProxyModel.Double|
                                            QgsFieldProxyModel.Numeric|
                                            QgsFieldProxyModel.LongLong)
        # Dest
        self.dlg.dest_combobox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.dlg.dest_combobox.setCurrentIndex(-1)
        self.dlg.id_dest_combobox.setLayer(None)
        self.dlg.field_dest_combobox.setLayer(None)

        self.dlg.id_dest_combobox.setFilters(QgsFieldProxyModel.String|
                                            QgsFieldProxyModel.Int|
                                            QgsFieldProxyModel.Double|
                                            QgsFieldProxyModel.Numeric|
                                            QgsFieldProxyModel.LongLong)

        self.dlg.field_dest_combobox.setFilters(QgsFieldProxyModel.Int|
                                            QgsFieldProxyModel.Double|
                                            QgsFieldProxyModel.Numeric|
                                            QgsFieldProxyModel.LongLong)

        #----------Restrictions
        self.dlg.filt_combobox.setCurrentIndex(0)
        self.dlg.measure_combobox.setCurrentIndex(0)
        self.dlg.friction_distance.clear()
        self.dlg.tipo_filt_dist.setCurrentIndex(0)
        self.dlg.tipo_filt_fluj.setCurrentIndex(0)
        self.dlg.tipo_filt_dist.setEnabled(False)
        self.dlg.tipo_filt_fluj.setEnabled(False)
        self.dlg.friction_distance.setValidator(QDoubleValidator())
        self.dlg.val1_dist.setEnabled(False)
        self.dlg.val1_dist.setReadOnly(False)
        self.dlg.val1_dist.clear()
        validator = QDoubleValidator()
        validator.setBottom(0)
        self.dlg.val1_dist.setValidator(validator)
        
        self.dlg.groupBox.setVisible(False)
        self.dlg.groupBox_2.setVisible(False)
        self.dlg.group_reports.setVisible(False)

        self.dlg.val2_dist.setEnabled(False)
        self.dlg.val2_dist.setReadOnly(False)
        self.dlg.val2_dist.clear()
        self.dlg.val2_dist.setValidator(validator)
        self.dlg.val1_fluj.setEnabled(False)
        self.dlg.val1_fluj.setReadOnly(False)
        self.dlg.val1_fluj.clear()
        self.dlg.val1_fluj.setValidator(validator)
        self.dlg.val2_fluj.setEnabled(False)
        self.dlg.val2_fluj.setReadOnly(False)
        self.dlg.val2_fluj.clear()
        self.dlg.val2_fluj.setValidator(validator)
        self.dlg.val1_dist.setVisible(False)
        self.dlg.val2_dist.setVisible(False)

        self.dlg.val1_fluj.setVisible(False)
        self.dlg.val2_fluj.setVisible(False)
        
        self.dlg.check_exe_f.setChecked(False)
        self.dlg.check_exe_s.setChecked(False)
        self.dlg.check_lineas.setChecked(False)

        #----------outputs
        self.dlg.sqlite_check_load.setVisible(False)
        self.dlg.geojson_check_load.setVisible(False)
        self.dlg.geopackage_check_load.setVisible(False)
        self.dlg.hd_check_load.setVisible(False)

        self.dlg.memory_check.setChecked(True)
        self.dlg.sqlite_check.setChecked(False)
        self.dlg.geojson_check.setChecked(False)
        self.dlg.geopackage_check.setChecked(False)
        self.dlg.hd_check.setChecked(False)

        self.dlg.csv_check.setChecked(False)
        self.dlg.ods_check.setChecked(False)
        self.dlg.xls_check.setChecked(False)
        
        self.dlg.prefijo.clear()
        self.dlg.output.clear()
        self.dlg.check_projects.setChecked(False)
        self.dlg.projects_combobox.clear()
        self.dlg.projects_combobox.setEnabled(False)
        self.load_projects()


    def connections(self):
        # # view restrictions
        self.dlg.btn_reg2.clicked.connect(self.tab_inputs)
        # # view outputs
        self.dlg.btn_reg3.clicked.connect(self.tab_restrictions)
        # Validate ---------- Inputs
        self.dlg.origin_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.id_origin_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.field_origin_combobox.currentIndexChanged.connect(self.clear_inputs)

        self.dlg.dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.id_dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.field_dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.btn_sig1.clicked.connect(self.validate_inputs)
        # Restrictions
        self.dlg.filt_combobox.currentIndexChanged.connect(self.restrictions)
        self.dlg.tipo_filt_dist.currentIndexChanged.connect(self.restrictions_valuesD)
        self.dlg.tipo_filt_fluj.currentIndexChanged.connect(self.restrictions_valuesF)
        # Validate -------- Restrictions
        self.dlg.filt_combobox.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.measure_combobox.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.friction_distance.textEdited.connect(self.clear_restrictions)
        self.dlg.tipo_filt_dist.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.val1_dist.textEdited.connect(self.clear_restrictions)
        self.dlg.val2_dist.textEdited.connect(self.clear_restrictions)
        self.dlg.tipo_filt_fluj.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.val1_fluj.textEdited.connect(self.clear_restrictions)
        self.dlg.val2_fluj.textEdited.connect(self.clear_restrictions)
        self.dlg.check_exe_f.stateChanged.connect(self.clear_restrictions)
        self.dlg.check_exe_s.stateChanged.connect(self.clear_restrictions)
        self.dlg.btn_sig2.clicked.connect(self.validate_restrictions)

        # Output
        self.dlg.sqlite_check.stateChanged.connect(self.hide_show_sqlite)
        self.dlg.geojson_check.stateChanged.connect(self.hide_show_geojson)
        self.dlg.geopackage_check.stateChanged.connect(self.hide_show_geopackage)
        self.dlg.hd_check.stateChanged.connect(self.hide_show_hd)

        self.dlg.check_projects.stateChanged.connect(self.recent_projects)
        self.dlg.projects_combobox.currentIndexChanged.connect(self.set_project_output)
        self.dlg.btn_output.clicked.connect(self.select_output)

        # Validate ------------ outputs
        self.dlg.memory_check.stateChanged.connect(self.clear_outputs)
        self.dlg.sqlite_check.stateChanged.connect(self.clear_outputs)
        self.dlg.geojson_check.stateChanged.connect(self.clear_outputs)
        self.dlg.geopackage_check.stateChanged.connect(self.clear_outputs)

        # Btn acept
        self.dlg.tabWidget.tabBarClicked.connect(self.validate_tabs)
        self.dlg.btn_aceptar.clicked.connect(self.validate_outputs)

        # Abouts
        self.dlg.btn_about.clicked.connect(self.__about)
        self.dlg.btn_about2.clicked.connect(self.__about)
        self.dlg.btn_about3.clicked.connect(self.__about)
        
        # Origin -dest btns
        self.dlg.btn_origin.clicked.connect(self.load_origin)
        self.dlg.btn_dest.clicked.connect(self.load_dest)

    # ------ TABS
    def tab_inputs(self):
        self.dlg.tabWidget.setCurrentIndex(0)
        self.dlg.tabWidget.setTabEnabled(0,True)
        self.dlg.tabWidget.setTabEnabled(1, False)
        self.dlg.tabWidget.setTabEnabled(2,False)

    def tab_restrictions(self):
        self.dlg.tabWidget.setTabEnabled(0, False)
        self.dlg.tabWidget.setCurrentIndex(1)
        self.dlg.tabWidget.setTabEnabled(1, True)
        self.dlg.tabWidget.setTabEnabled(2, False)


    def tab_formats(self):
        self.dlg.tabWidget.setTabEnabled(0, False)
        self.dlg.tabWidget.setTabEnabled(1, False)
        self.dlg.tabWidget.setCurrentIndex(2)
        self.dlg.tabWidget.setTabEnabled(2, True)

    def restrictions(self):
        index = self.dlg.filt_combobox.currentIndex()
        self.dlg.tipo_filt_dist.setStyleSheet("")
        self.dlg.tipo_filt_fluj.setStyleSheet("")
        self.dlg.val1_dist.setStyleSheet("")
        self.dlg.val2_dist.setStyleSheet("")
        self.dlg.val1_fluj.setStyleSheet("")
        self.dlg.val2_fluj.setStyleSheet("")
        if index != 0:
            if index == 1:
                self.dlg.group_reports.setVisible(True)
                self.dlg.check_lineas.setVisible(True)
                self.dlg.check_exe_f.setVisible(False)
                self.dlg.check_exe_s.setVisible(False)
                self.dlg.groupBox.setVisible(True)
                self.dlg.groupBox_2.setVisible(False)
                self.dlg.tipo_filt_dist.setEnabled(True)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(False)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
            elif index == 2:
                self.dlg.group_reports.setVisible(True)
                self.dlg.check_lineas.setVisible(False)
                self.dlg.check_exe_f.setVisible(True)
                self.dlg.check_exe_s.setVisible(True)
                self.dlg.groupBox.setVisible(False)
                self.dlg.groupBox_2.setVisible(True)
                self.dlg.tipo_filt_dist.setEnabled(False)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(True)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
                
            elif index == 3:
                self.dlg.group_reports.setVisible(True)
                self.dlg.check_lineas.setVisible(True)
                self.dlg.check_exe_f.setVisible(True)
                self.dlg.check_exe_s.setVisible(True)
                self.dlg.groupBox.setVisible(True)
                self.dlg.groupBox_2.setVisible(True)
                self.dlg.tipo_filt_dist.setEnabled(True)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(True)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
        else:
            self.dlg.group_reports.setVisible(False)
            self.dlg.groupBox.setVisible(False)
            self.dlg.groupBox_2.setVisible(False)
            self.dlg.tipo_filt_dist.setEnabled(False)
            self.dlg.tipo_filt_dist.setCurrentIndex(0)
            self.dlg.tipo_filt_fluj.setEnabled(False)
            self.dlg.tipo_filt_fluj.setCurrentIndex(0)
            self.dlg.val1_dist.setEnabled(False)
            self.dlg.val2_dist.setEnabled(False)
            self.dlg.val1_fluj.setEnabled(False)
            self.dlg.val2_fluj.setEnabled(False)
            self.dlg.val1_dist.setVisible(False)
            self.dlg.val2_dist.setVisible(False)
            self.dlg.val1_fluj.setVisible(False)
            self.dlg.val2_fluj.setVisible(False)


    def restrictions_valuesD(self):
        index = self.dlg.tipo_filt_dist.currentIndex()
        if index != 0:
            if index == 1 or index == 2:
                self.dlg.val1_dist.setEnabled(True)
                self.dlg.val1_dist.setVisible(True)
                self.dlg.val1_dist.setPlaceholderText("Ingresa un valor")
                self.dlg.val2_dist.setEnabled(False)
                self.dlg.val2_dist.setVisible(False)
            elif index == 3:
                self.dlg.val1_dist.setEnabled(True)
                self.dlg.val1_dist.setVisible(True)
                self.dlg.val1_dist.setPlaceholderText("Valor inicial")
                self.dlg.val2_dist.setEnabled(True)
                self.dlg.val2_dist.setVisible(True)
                self.dlg.val2_dist.setPlaceholderText("Valor final")
        else:
            self.dlg.val1_dist.setEnabled(False)
            self.dlg.val2_dist.setEnabled(False)
            self.dlg.val1_dist.setVisible(False)
            self.dlg.val2_dist.setVisible(False)
            self.dlg.val1_dist.clear()
            self.dlg.val2_dist.clear()


    def restrictions_valuesF(self):
        index = self.dlg.tipo_filt_fluj.currentIndex()
        if index != 0:
            if index == 1 or index == 2:
                self.dlg.val1_fluj.setEnabled(True)
                self.dlg.val1_fluj.setVisible(True)
                self.dlg.val1_fluj.setPlaceholderText("Ingresa un valor")
                self.dlg.val2_fluj.setEnabled(False)
                self.dlg.val2_fluj.setVisible(False)
            elif index == 3:
                self.dlg.val1_fluj.setEnabled(True)
                self.dlg.val1_fluj.setVisible(True)
                self.dlg.val1_fluj.setPlaceholderText("Valor inicial")
                self.dlg.val2_fluj.setEnabled(True)
                self.dlg.val2_fluj.setVisible(True)
                self.dlg.val2_fluj.setPlaceholderText("Valor final")
        else:
            self.dlg.val1_fluj.setEnabled(False)
            self.dlg.val1_fluj.setVisible(False)
            self.dlg.val2_fluj.setEnabled(False)
            self.dlg.val2_fluj.setVisible(False)
            self.dlg.val1_fluj.clear()
            self.dlg.val2_fluj.clear()


    def hide_show_sqlite(self, state):
        if state:
            self.dlg.sqlite_check_load.setVisible(True)
        else:
            self.dlg.sqlite_check_load.setVisible(False)
            self.dlg.sqlite_check_load.setChecked(False)

    def hide_show_geojson(self,state):
        if state:
            self.dlg.geojson_check_load.setVisible(True)
        else:
            self.dlg.geojson_check_load.setVisible(False)
            self.dlg.geojson_check_load.setChecked(False)

    def hide_show_geopackage(self,state):
        if state:
            self.dlg.geopackage_check_load.setVisible(True)
        else:
            self.dlg.geopackage_check_load.setVisible(False)
            self.dlg.geopackage_check_load.setChecked(False)

    def hide_show_hd(self,state):
        if state:
            self.dlg.hd_check_load.setVisible(True)
        else:
            self.dlg.hd_check_load.setVisible(False)
            self.dlg.hd_check_load.setChecked(False)

    def recent_projects(self,state):
        if state:
            self.dlg.projects_combobox.setEnabled(True)
        else:
            self.dlg.projects_combobox.setCurrentIndex(0)
            self.dlg.projects_combobox.setEnabled(False)

    def load_projects(self):
        settings = QSettings()
        pjts = {}
        self.dlg.projects_combobox.addItem("Seleciona un proyecto...",None)
        count = 1
        for i in range(1,1000):
            rpt = settings.value(f'UI/recentProjects/{i}/title')
            rpp = settings.value(f'UI/recentProjects/{i}/path')
            if rpt == None:
                break
            else:
                pth = rpp.split(f"{rpt}.qgz",1)[0]
                if os.path.exists(pth):
                    pjts[str(count)]={"PROJECT":rpt,"PATH":pth}
                    count += 1

        for i in range(1, len(pjts)+1):
            self.dlg.projects_combobox.addItem(pjts[str(i)]["PROJECT"],pjts[str(i)]["PATH"])

    def set_project_output(self):
        self.dlg.output.setStyleSheet("")
        index = self.dlg.projects_combobox.currentIndex()
        if index != 0:
            pth = self.dlg.projects_combobox.itemData(index)
            self.dlg.output.setText(pth)
        else:
            self.dlg.output.clear()

    def select_output(self):
        self.dlg.output.setStyleSheet("")
        path = str(QFileDialog.getExistingDirectory(self.dlg, "Seleccionar carpeta"))
        if path != "":
            self.dlg.output.setText(path+"/")

    def __about(self):
        self.dlg2.show()

    def set_message(self, title, text, tipo, error=None):
        msjBox = QMessageBox()
        msjBox.setIcon(tipo)
        msjBox.setText(text)
        msjBox.setInformativeText("")
        msjBox.setWindowTitle(title)
        if error != None:
            msjBox.setDetailedText(error)
        msjBox.setStandardButtons(QMessageBox.Ok)
        msjBox.exec_()

    def clear_inputs(self):
        comboboxes = [self.dlg.origin_combobox, self.dlg.id_origin_combobox, self.dlg.field_origin_combobox,
                    self.dlg.dest_combobox, self.dlg.id_dest_combobox, self.dlg.field_dest_combobox]

        for combobox in comboboxes:
            if combobox.currentIndex() != -1:
                combobox.setStyleSheet("")

    def validate_inputs(self):
        comboboxes = [self.dlg.origin_combobox, self.dlg.id_origin_combobox, self.dlg.field_origin_combobox,
                    self.dlg.dest_combobox, self.dlg.id_dest_combobox, self.dlg.field_dest_combobox]
        flags = [False]*6
        for i, combobox in enumerate(comboboxes):
            if combobox.currentIndex() == -1:
                combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                flags[i] = True

        if all(flags):
            origin = self.dlg.origin_combobox.currentLayer()
            dest = self.dlg.dest_combobox.currentLayer()
            crs_capa1 = origin.crs()
            crs_capa2 = dest.crs()
            capa1_epsg = crs_capa1.authid()
            capa2_epsg = crs_capa2.authid()
            if len(capa1_epsg)>0:
                epsg1 = capa1_epsg.split(":")[1]
            else:
                epsg1 = "Desconocido"

            if len(capa2_epsg)>0:
                epsg2 = capa2_epsg.split(":")[1]
            else:
                epsg2 = "Desconocido"
            if crs_capa1.mapUnits() != crs_capa2.mapUnits(): #0 son metros
                flags[0] = False
                flags[3] = False
                comboboxes[0].setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                comboboxes[3].setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                self.set_message("Error",f"Las capas no tienen la misma proyección.\nOrígen: EPSG:{epsg1}\nDestino:EPSG:{epsg2}", QMessageBox.Critical)
            else:
                if epsg1 != epsg2:
                    flags[0] = False
                    flags[3] = False
                    comboboxes[0].setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    comboboxes[3].setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    self.set_message("Error",f"Las capas no tienen la misma proyección.\nOrígen:   EPSG:{epsg1}\nDestino: EPSG:{epsg2}", QMessageBox.Critical)
                else:
                    self.dlg.tabWidget.setTabEnabled(1,True)
                    self.dlg.tabWidget.setTabEnabled(0,False)
                    self.dlg.tabWidget.setTabEnabled(2,False)
                    self.dlg.tabWidget.setCurrentIndex(1)
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    def clear_restrictions(self):
        comboboxes = [self.dlg.filt_combobox, self.dlg.measure_combobox, self.dlg.tipo_filt_dist, self.dlg.tipo_filt_fluj]

        for combobox in comboboxes:
            if combobox.currentIndex() != 0:
                combobox.setStyleSheet("")

        lines = [self.dlg.friction_distance, self.dlg.val1_dist, self.dlg.val2_dist, self.dlg.val1_fluj, self.dlg.val2_fluj]

        for line in lines:
            if line.text() != "":
                line.setStyleSheet("")
        
        flag = False
        checks = [self.dlg.check_exe_s, self.dlg.check_exe_f]
        for check in checks:
            if check.isChecked() == True:
                flag = True
                break
        if flag:
            for check in checks:
                check.setStyleSheet("")

    def validate_restrictions(self):
        flag1, flag3, flag4, flag5, flag2 = False, False, False, False, False

        if self.dlg.filt_combobox.currentIndex() == 0:
            self.dlg.filt_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag3 = True

        if self.dlg.measure_combobox.currentIndex() == 0:
            self.dlg.measure_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag4 = True

        if self.dlg.friction_distance.text() == "":
            self.dlg.friction_distance.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag5 = True

        # Origin restriction
        if self.dlg.filt_combobox.currentIndex() == 1:
            flag2 = True
            if self.dlg.tipo_filt_dist.currentIndex() == 0:
                self.dlg.tipo_filt_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_dist.currentIndex() == 1 or self.dlg.tipo_filt_dist.currentIndex() == 2:
                    if self.dlg.val1_dist.text() == "":
                        self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        flag1 = True
                elif self.dlg.tipo_filt_dist.currentIndex() == 3:
                    if self.dlg.val1_dist.text() != "" and self.dlg.val2_dist.text() != "":
                        try:
                            if float(self.dlg.val1_dist.text()) < float(self.dlg.val2_dist.text()):
                                flag1 = True
                            else:
                                self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_dist.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_dist.text() == "":
                            self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_dist.text() == "":
                            self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

        # Dest Restriction
        elif self.dlg.filt_combobox.currentIndex() == 2:
            if self.dlg.tipo_filt_fluj.currentIndex() == 0:
                self.dlg.tipo_filt_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_fluj.currentIndex() == 1 or self.dlg.tipo_filt_fluj.currentIndex() == 2:
                    if self.dlg.val1_fluj.text() == "":
                        self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        flag1 = True
                elif self.dlg.tipo_filt_fluj.currentIndex() == 3:
                    if self.dlg.val1_fluj.text() != "" and self.dlg.val2_fluj.text() != "":
                        try:
                            if float(self.dlg.val1_fluj.text()) < float(self.dlg.val2_fluj.text()):
                                flag1 = True
                            else:
                                self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_fluj.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_fluj.text() == "":
                            self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_fluj.text() == "":
                            self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                            
            checks = [self.dlg.check_exe_f, self.dlg.check_exe_s]
            aux = []
            for check in checks:
                if check.isChecked() == True:
                    aux.append(True)
                    flag2 = True
                    break
            if len(aux) == 0:
                for check in checks:
                    check.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    
        # Two restrictions
        elif self.dlg.filt_combobox.currentIndex() == 3:
            auxflag1, auxflag2 = False, False
            # rest origin  - Doble
            if self.dlg.tipo_filt_dist.currentIndex() == 0:
                self.dlg.tipo_filt_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_dist.currentIndex() == 1 or self.dlg.tipo_filt_dist.currentIndex() == 2:
                    if self.dlg.val1_dist.text() == "":
                        self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        auxflag1 = True
                elif self.dlg.tipo_filt_dist.currentIndex() == 3:
                    if self.dlg.val1_dist.text() != "" and self.dlg.val2_dist.text() != "":
                        try:
                            if float(self.dlg.val1_dist.text()) < float(self.dlg.val2_dist.text()):
                                auxflag1 = True
                            else:
                                self.dlg.btn_sig2.setEnabled(False)
                                self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_dist.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_dist.text() == "":
                            self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_dist.text() == "":
                            self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

            # Rest dest- Doble
            if self.dlg.tipo_filt_fluj.currentIndex() == 0:
                self.dlg.tipo_filt_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_fluj.currentIndex() == 1 or self.dlg.tipo_filt_fluj.currentIndex() == 2:
                    if self.dlg.val1_fluj.text() == "":
                        self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        auxflag2 = True
                elif self.dlg.tipo_filt_fluj.currentIndex() == 3:
                    if self.dlg.val1_fluj.text() != "" and self.dlg.val2_fluj.text() != "":
                        try:
                            if float(self.dlg.val1_fluj.text()) < float(self.dlg.val2_fluj.text()):
                                auxflag2 = True
                            else:
                                self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_fluj.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_fluj.text() == "":
                            self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_fluj.text() == "":
                            self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

                if auxflag1 and auxflag2:
                    flag1 = True
            
            checks = [self.dlg.check_exe_f, self.dlg.check_exe_s]
            aux = []
            for check in checks:
                if check.isChecked() == True:
                    aux.append(True)
                    flag2 = True
                    break
            if len(aux) == 0:
                for check in checks:
                    check.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

        if flag1 and flag3 and flag4 and flag5 and flag2:
            self.dlg.tabWidget.setTabEnabled(2,True)
            self.dlg.tabWidget.setTabEnabled(0,False)
            self.dlg.tabWidget.setTabEnabled(1,False)
            self.dlg.tabWidget.setCurrentIndex(2)
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    def clear_outputs(self):
        flag = False
        checks = [self.dlg.memory_check, self.dlg.sqlite_check, self.dlg.geojson_check, self.dlg.geopackage_check, self.dlg.hd_check]
        for check in checks:
            if check.isChecked() == True:
                flag = True
                break
        if flag:
            for check in checks:
                check.setStyleSheet("")

    def validate_outputs(self):
        checks = [self.dlg.memory_check, self.dlg.sqlite_check, self.dlg.geojson_check, self.dlg.geopackage_check, self.dlg.hd_check]
        aux = []
        flag1, flag2 = False, False
        for check in checks:
            if check.isChecked() == True:
                aux.append(True)
                flag1 = True
                break
        if len(aux) == 0:
            for check in checks:
                check.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

        if self.dlg.output.text() != "":
            flag2 = True
        else:
            self.dlg.output.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        if flag1 and flag2:
            self.dlg.tabWidget.setTabEnabled(0,False)
            self.dlg.tabWidget.setTabEnabled(1,False)
            self.get_data_and_run()
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    def validate_tabs(self, index):
        if index == 0:
            self.validate_inputs()
        elif index == 1:
            self.validate_restrictions()
        elif index == 2:
            self.validate_outputs()

    def get_data_and_run(self):
        params = {}
        rest_data = {}
        origin = self.dlg.origin_combobox.currentLayer()
        id_origin = self.dlg.id_origin_combobox.currentField()
        field_origin = self.dlg.field_origin_combobox.currentField()

        dest = self.dlg.dest_combobox.currentLayer()
        id_dest = self.dlg.id_dest_combobox.currentField()
        field_dest = self.dlg.field_dest_combobox.currentField()

        filtro = self.dlg.filt_combobox.currentIndex() - 1
        # ----------------------- Origin
        if filtro == 0:
            tipo_filt_dist = self.dlg.tipo_filt_dist.currentIndex() - 1
            if tipo_filt_dist == 0 or tipo_filt_dist == 1:
                val1_dist = float(self.dlg.val1_dist.text())
                rest_data={"R_ORIG":
                                    {"OPTION": tipo_filt_dist,
                                    "VALUE":[val1_dist]}}
            elif tipo_filt_dist == 2:
                val1_dist = float(self.dlg.val1_dist.text())
                val2_dist = float(self.dlg.val2_dist.text())
                rest_data={"R_ORIG":
                                    {"OPTION": tipo_filt_dist,
                                    "VALUE":[val1_dist, val2_dist]}}
            reports = [False, False]
        # ----------------------- Dest
        elif filtro == 1:
            tipo_filt_fluj = self.dlg.tipo_filt_fluj.currentIndex() - 1
            if tipo_filt_fluj == 0 or tipo_filt_fluj == 1:
                val1_fluj = float(self.dlg.val1_fluj.text())
                rest_data={"R_DEST":
                                    {"OPTION": tipo_filt_fluj,
                                    "VALUE":[val1_fluj]}}
            elif tipo_filt_fluj == 2:
                val1_fluj = float(self.dlg.val1_fluj.text())
                val2_fluj = float(self.dlg.val2_fluj.text())
                rest_data={"R_DEST":
                                    {"OPTION": tipo_filt_fluj,
                                    "VALUE":[val1_fluj, val2_fluj]}}
            reports = [self.dlg.check_exe_s.isChecked(), self.dlg.check_exe_f.isChecked()]

        #  ------------------------ Double
        elif filtro == 2:
            tipo_filt_dist = self.dlg.tipo_filt_dist.currentIndex() - 1
            if tipo_filt_dist == 0 or tipo_filt_dist == 1:
                val1_dist = float(self.dlg.val1_dist.text())
                rest_data={"R_ORIG":
                                    {"OPTION": tipo_filt_dist,
                                    "VALUE":[val1_dist]}}
            elif tipo_filt_dist == 2:
                val1_dist = float(self.dlg.val1_dist.text())
                val2_dist = float(self.dlg.val2_dist.text())
                rest_data={"R_ORIG":
                                    {"OPTION": tipo_filt_dist,
                                    "VALUE":[val1_dist, val2_dist]}}

            tipo_filt_fluj = self.dlg.tipo_filt_fluj.currentIndex() - 1
            if tipo_filt_fluj == 0 or tipo_filt_fluj == 1:
                val1_fluj = float(self.dlg.val1_fluj.text())
                rest_data={"R_DEST":
                                    {"OPTION": tipo_filt_fluj,
                                    "VALUE":[val1_fluj]}}
            elif tipo_filt_fluj == 2:
                val1_fluj = float(self.dlg.val1_fluj.text())
                val2_fluj = float(self.dlg.val2_fluj.text())
                rest_data={"R_DEST":
                                    {"OPTION": tipo_filt_fluj,
                                    "VALUE":[val1_fluj, val2_fluj]}}
            reports = [self.dlg.check_exe_s.isChecked(), self.dlg.check_exe_f.isChecked()]

        measure = self.dlg.measure_combobox.currentIndex() - 1
        friction_distance = float(self.dlg.friction_distance.text())

        memory_check = self.dlg.memory_check.isChecked()
        sqlite_check = self.dlg.sqlite_check.isChecked()
        sqlite_check_load = self.dlg.sqlite_check_load.isChecked()
        geojson_check = self.dlg.geojson_check.isChecked()
        geojson_check_load = self.dlg.geojson_check_load.isChecked()
        geopackage_check = self.dlg.geopackage_check.isChecked()
        geopackage_check_load = self.dlg.geopackage_check_load.isChecked()
        hd_check = self.dlg.hd_check.isChecked()
        hd_check_load = self.dlg.hd_check_load.isChecked()

        xls_check = self.dlg.xls_check.isChecked()
        ods_check = self.dlg.ods_check.isChecked()
        csv_check = self.dlg.csv_check.isChecked()
        
        lines = self.dlg.check_lineas.isChecked()

        prefijo = self.dlg.prefijo.text()

        output = self.dlg.output.text()

        params = {
                "ORIGIN": origin,
                "ID_ORI": id_origin,
                "VAR_ORI": field_origin,
                "DEST": dest,
                "ID_DEST": id_dest,
                "VAR_DEST": field_dest, 
                "UNIT": measure, 
                "FRICTION_DISTANCE": friction_distance,
                "RESTR": filtro,
                "VAL_REST": rest_data,
                "OUTPUT":output,
                "PREFIJO": prefijo,
                "EXPORTS": {
                        "GeoJSON": {"SAVE":geojson_check, "OPEN":geojson_check_load},
                        "HD": {"SAVE":hd_check, "OPEN":hd_check_load},
                        "Spatialite": {"SAVE":sqlite_check, "OPEN":sqlite_check_load},
                        "Memory": memory_check,
                        "Geopackage": {"SAVE":geopackage_check, "OPEN":geopackage_check_load}
                        },
                "SAVE": {
                    "XLS":xls_check,
                    "ODS":ods_check,
                    "CSV":csv_check
                    },
                "REPORTS":reports,
                "LINES" : lines
                }
        self.dlg.hide()
        start = time.time()
        run = Main(params)
        run.run()
        end = time.time()
        print(f'Tiempo de ejecución: {end - start} segundos')

