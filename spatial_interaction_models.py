# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpatialInteractionModels
                                 A QGIS plugin
 Este plugin calcula 3 modelos de interacción espacial y son: restricción en el origen, restricción en el destino y los doblemente restrictivos.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Adonai Emmanuel Nicanor Bautista
        email                : djnonasrm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from numpy import True_
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .spatial_interaction_models_dialog import SpatialInteractionModelsDialog
import os.path
from qgis.core import *
from PyQt5.QtWidgets import *
from qgis.gui import *
from PyQt5.QtGui import *
from PyQt5.QtCore import QSettings
from PyQt5 import *

from .about_dialog import Ui_DialogBase

class SpatialInteractionModels:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SpatialInteractionModels_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Modelos de Interacción Espacial')

        self.action = None
        self.toolbar = self.iface.addToolBar(u'SpatialInteractionModels')
        self.toolbar.setObjectName(u'SpatialInteractionModels')
        self.dlg = SpatialInteractionModelsDialog()
        self.dlg2 = Ui_DialogBase()
        self.connections()


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SpatialInteractionModels', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/spatial_interaction_models/test1.png'
        icon = QIcon(icon_path)
        self.action = QAction(icon,u'&Modelos de Interacción Espacial',self.iface.mainWindow())
        self.action.setEnabled(True)
        self.toolbar.addAction(self.action)
        self.action.triggered.connect(self.run)
        self.iface.addPluginToMenu(self.menu,self.action)
        self.actions.append(self.action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Modelos de Interacción Espacial'),
                action)
            self.iface.removeToolBarIcon(action)
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""

        self.clear_and_start()
        self.dlg.show()
        self.dlg.exec_()

    def clear_and_start(self):
        # TABS
        self.dlg.tabWidget.setTabEnabled(1,False)
        self.dlg.tabWidget.setTabEnabled(2,False)

        # Clear all inputs
        self.dlg.val2_dist.setStyleSheet("")
        self.dlg.val2_fluj.setStyleSheet("")

        # inputs
        self.dlg.origin_combobox.setStyleSheet("")
        self.dlg.id_origin_combobox.setStyleSheet("")
        self.dlg.field_origin_combobox.setStyleSheet("")

        self.dlg.dest_combobox.setStyleSheet("")
        self.dlg.id_dest_combobox.setStyleSheet("")
        self.dlg.field_dest_combobox.setStyleSheet("")

        # Restrictions

        self.dlg.tabWidget.setCurrentIndex(0)
        # Origin
        self.dlg.origin_combobox.setFilters(QgsMapLayerProxyModel.PointLayer|QgsMapLayerProxyModel.PolygonLayer)
        self.dlg.origin_combobox.setCurrentIndex(-1)
        self.dlg.id_origin_combobox.setLayer(None)
        self.dlg.field_origin_combobox.setLayer(None)

        self.dlg.id_origin_combobox.setFilters(QgsFieldProxyModel.String|
                                               QgsFieldProxyModel.Int|
                                               QgsFieldProxyModel.Double|
                                               QgsFieldProxyModel.Numeric|
                                               QgsFieldProxyModel.LongLong)

        self.dlg.field_origin_combobox.setFilters(QgsFieldProxyModel.Int|
                                               QgsFieldProxyModel.Double|
                                               QgsFieldProxyModel.Numeric|
                                               QgsFieldProxyModel.LongLong)
        # Dest
        self.dlg.dest_combobox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.dlg.dest_combobox.setCurrentIndex(-1)
        self.dlg.id_dest_combobox.setLayer(None)
        self.dlg.field_dest_combobox.setLayer(None)

        self.dlg.id_dest_combobox.setFilters(QgsFieldProxyModel.String|
                                               QgsFieldProxyModel.Int|
                                               QgsFieldProxyModel.Double|
                                               QgsFieldProxyModel.Numeric|
                                               QgsFieldProxyModel.LongLong)

        self.dlg.field_dest_combobox.setFilters(QgsFieldProxyModel.Int|
                                               QgsFieldProxyModel.Double|
                                               QgsFieldProxyModel.Numeric|
                                               QgsFieldProxyModel.LongLong)

        #----------Restrictions
        self.dlg.filt_combobox.setCurrentIndex(0)
        self.dlg.measure_combobox.setCurrentIndex(0)
        self.dlg.friction_distance.clear()
        self.dlg.tipo_filt_dist.setCurrentIndex(0)
        self.dlg.tipo_filt_fluj.setCurrentIndex(0)
        self.dlg.tipo_filt_dist.setEnabled(False)
        self.dlg.tipo_filt_fluj.setEnabled(False)
        self.dlg.friction_distance.setValidator(QDoubleValidator())
        self.dlg.val1_dist.setEnabled(False)
        self.dlg.val1_dist.setReadOnly(False)
        self.dlg.val1_dist.clear()
        validator = QDoubleValidator()
        validator.setBottom(0)
        self.dlg.val1_dist.setValidator(validator)

        self.dlg.val2_dist.setEnabled(False)
        self.dlg.val2_dist.setReadOnly(False)
        self.dlg.val2_dist.clear()
        self.dlg.val2_dist.setValidator(validator)
        self.dlg.val1_fluj.setEnabled(False)
        self.dlg.val1_fluj.setReadOnly(False)
        self.dlg.val1_fluj.clear()
        self.dlg.val1_fluj.setValidator(validator)
        self.dlg.val2_fluj.setEnabled(False)
        self.dlg.val2_fluj.setReadOnly(False)
        self.dlg.val2_fluj.clear()
        self.dlg.val2_fluj.setValidator(validator)
        self.dlg.val1_dist.setVisible(False)
        self.dlg.val2_dist.setVisible(False)

        self.dlg.val1_fluj.setVisible(False)
        self.dlg.val2_fluj.setVisible(False)

        #----------outputs
        self.dlg.sqlite_check_load.setVisible(False)
        self.dlg.geojson_check_load.setVisible(False)
        self.dlg.geopackage_check_load.setVisible(False)
        self.dlg.hd_check_load.setVisible(False)

        self.dlg.sqlite_check.setChecked(False)
        self.dlg.geojson_check.setChecked(False)
        self.dlg.geopackage_check.setChecked(False)
        self.dlg.hd_check.setChecked(False)

        self.dlg.prefijo.clear()
        self.dlg.output.clear()
        self.dlg.check_projects.setChecked(False)
        self.dlg.projects_combobox.clear()
        self.dlg.projects_combobox.setEnabled(False)
        self.load_projects()


    def connections(self):
        # # view inputs

        # # view restrictions
        self.dlg.btn_reg2.clicked.connect(self.tab_inputs)
        # self.dlg.btn_sig2.clicked.connect(self.tab_formats)

        # # view outputs
        self.dlg.btn_reg3.clicked.connect(self.tab_restrictions)

        # Validate ---------- Inputs
        self.dlg.origin_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.id_origin_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.field_origin_combobox.currentIndexChanged.connect(self.clear_inputs)

        self.dlg.dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.id_dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.field_dest_combobox.currentIndexChanged.connect(self.clear_inputs)
        self.dlg.btn_sig1.clicked.connect(self.validate_inputs)


        # Restrictions
        self.dlg.filt_combobox.currentIndexChanged.connect(self.restrictions)
        self.dlg.tipo_filt_dist.currentIndexChanged.connect(self.restrictions_valuesD)
        self.dlg.tipo_filt_fluj.currentIndexChanged.connect(self.restrictions_valuesF)

        # Validate -------- Restrictions
        self.dlg.filt_combobox.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.measure_combobox.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.friction_distance.textEdited.connect(self.clear_restrictions)
        self.dlg.tipo_filt_dist.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.val1_dist.textEdited.connect(self.clear_restrictions)
        self.dlg.val2_dist.textEdited.connect(self.clear_restrictions)
        self.dlg.tipo_filt_fluj.currentIndexChanged.connect(self.clear_restrictions)
        self.dlg.val1_fluj.textEdited.connect(self.clear_restrictions)
        self.dlg.val2_fluj.textEdited.connect(self.clear_restrictions)

        self.dlg.btn_sig2.clicked.connect(self.validate_restrictions)

        # Output
        self.dlg.sqlite_check.stateChanged.connect(self.hide_show_sqlite)
        self.dlg.geojson_check.stateChanged.connect(self.hide_show_geojson)
        self.dlg.geopackage_check.stateChanged.connect(self.hide_show_geopackage)
        self.dlg.hd_check.stateChanged.connect(self.hide_show_hd)

        self.dlg.check_projects.stateChanged.connect(self.recent_projects)
        self.dlg.projects_combobox.currentIndexChanged.connect(self.set_project_output)
        self.dlg.btn_output.clicked.connect(self.select_output)

        # Validate ------------ outputs
        self.dlg.memory_check.stateChanged.connect(self.clear_outputs)
        self.dlg.sqlite_check.stateChanged.connect(self.clear_outputs)
        self.dlg.geojson_check.stateChanged.connect(self.clear_outputs)
        self.dlg.geopackage_check.stateChanged.connect(self.clear_outputs)

        # Btn acept
        self.dlg.btn_aceptar.clicked.connect(self.validate_outputs)

        # Abouts
        self.dlg.btn_about.clicked.connect(self.__about)
        self.dlg.btn_about2.clicked.connect(self.__about)
        self.dlg.btn_about3.clicked.connect(self.__about)

    # ------ TABS
    def tab_inputs(self):
        self.dlg.tabWidget.setCurrentIndex(0)

    def tab_restrictions(self):
        self.dlg.tabWidget.setCurrentIndex(1)

    def tab_formats(self):
        self.dlg.tabWidget.setCurrentIndex(2)

    def restrictions(self):
        index = self.dlg.filt_combobox.currentIndex()
        self.dlg.tipo_filt_dist.setStyleSheet("")
        self.dlg.tipo_filt_fluj.setStyleSheet("")
        self.dlg.val1_dist.setStyleSheet("")
        self.dlg.val2_dist.setStyleSheet("")
        self.dlg.val1_fluj.setStyleSheet("")
        self.dlg.val2_fluj.setStyleSheet("")
        if index != 0:
            if index == 1:
                self.dlg.tipo_filt_dist.setEnabled(True)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(False)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
            elif index == 2:
                self.dlg.tipo_filt_dist.setEnabled(False)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(True)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
            elif index == 3:
                self.dlg.tipo_filt_dist.setEnabled(True)
                self.dlg.tipo_filt_dist.setCurrentIndex(0)
                self.dlg.tipo_filt_fluj.setEnabled(True)
                self.dlg.tipo_filt_fluj.setCurrentIndex(0)
                self.dlg.val1_dist.setVisible(False)
                self.dlg.val2_dist.setVisible(False)
                self.dlg.val1_fluj.setVisible(False)
                self.dlg.val2_fluj.setVisible(False)
        else:
            self.dlg.tipo_filt_dist.setEnabled(False)
            self.dlg.tipo_filt_dist.setCurrentIndex(0)
            self.dlg.tipo_filt_fluj.setEnabled(False)
            self.dlg.tipo_filt_fluj.setCurrentIndex(0)
            self.dlg.val1_dist.setEnabled(False)
            self.dlg.val2_dist.setEnabled(False)
            self.dlg.val1_fluj.setEnabled(False)
            self.dlg.val2_fluj.setEnabled(False)
            self.dlg.val1_dist.setVisible(False)
            self.dlg.val2_dist.setVisible(False)
            self.dlg.val1_fluj.setVisible(False)
            self.dlg.val2_fluj.setVisible(False)


    def restrictions_valuesD(self):
        index = self.dlg.tipo_filt_dist.currentIndex()
        if index != 0:
            if index == 1 or index == 2:
                self.dlg.val1_dist.setEnabled(True)
                self.dlg.val1_dist.setVisible(True)
                self.dlg.val1_dist.setPlaceholderText("Ingresa un valor")
                self.dlg.val2_dist.setEnabled(False)
                self.dlg.val2_dist.setVisible(False)
            elif index == 3:
                self.dlg.val1_dist.setEnabled(True)
                self.dlg.val1_dist.setVisible(True)
                self.dlg.val1_dist.setPlaceholderText("Valor inicial")
                self.dlg.val2_dist.setEnabled(True)
                self.dlg.val2_dist.setVisible(True)
                self.dlg.val2_dist.setPlaceholderText("Valor final")
        else:
            self.dlg.val1_dist.setEnabled(False)
            self.dlg.val2_dist.setEnabled(False)
            self.dlg.val1_dist.setVisible(False)
            self.dlg.val2_dist.setVisible(False)
            self.dlg.val1_dist.clear()
            self.dlg.val2_dist.clear()


    def restrictions_valuesF(self):
        index = self.dlg.tipo_filt_fluj.currentIndex()
        if index != 0:
            if index == 1 or index == 2:
                self.dlg.val1_fluj.setEnabled(True)
                self.dlg.val1_fluj.setVisible(True)
                self.dlg.val1_fluj.setPlaceholderText("Ingresa un valor")
                self.dlg.val2_fluj.setEnabled(False)
                self.dlg.val2_fluj.setVisible(False)
            elif index == 3:
                self.dlg.val1_fluj.setEnabled(True)
                self.dlg.val1_fluj.setVisible(True)
                self.dlg.val1_fluj.setPlaceholderText("Valor inicial")
                self.dlg.val2_fluj.setEnabled(True)
                self.dlg.val2_fluj.setVisible(True)
                self.dlg.val2_fluj.setPlaceholderText("Valor final")
        else:
            self.dlg.val1_fluj.setEnabled(False)
            self.dlg.val1_fluj.setVisible(False)
            self.dlg.val2_fluj.setEnabled(False)
            self.dlg.val2_fluj.setVisible(False)
            self.dlg.val1_fluj.clear()
            self.dlg.val2_fluj.clear()


    def hide_show_sqlite(self, state):
        if state:
            self.dlg.sqlite_check_load.setVisible(True)
        else:
            self.dlg.sqlite_check_load.setVisible(False)
            self.dlg.sqlite_check_load.setChecked(False)

    def hide_show_geojson(self,state):
        if state:
            self.dlg.geojson_check_load.setVisible(True)
        else:
            self.dlg.geojson_check_load.setVisible(False)
            self.dlg.geojson_check_load.setChecked(False)

    def hide_show_geopackage(self,state):
        if state:
            self.dlg.geopackage_check_load.setVisible(True)
        else:
            self.dlg.geopackage_check_load.setVisible(False)
            self.dlg.geopackage_check_load.setChecked(False)

    def hide_show_hd(self,state):
        if state:
            self.dlg.hd_check_load.setVisible(True)
        else:
            self.dlg.hd_check_load.setVisible(False)
            self.dlg.hd_check_load.setChecked(False)

    def recent_projects(self,state):
        if state:
            self.dlg.projects_combobox.setEnabled(True)
        else:
            self.dlg.projects_combobox.setCurrentIndex(0)
            self.dlg.projects_combobox.setEnabled(False)

    def load_projects(self):
        settings = QSettings()
        pjts = {}
        self.dlg.projects_combobox.addItem("Seleciona un proyecto...",None)
        for i in range(1,1000):
            rpt = settings.value(f'UI/recentProjects/{i}/title')
            rpp = settings.value(f'UI/recentProjects/{i}/path')
            if rpt == None:
                break
            else:
                pth = rpp.split(f"{rpt}.qgz",1)[0]
                pjts[str(i)]={"PROJECT":rpt,"PATH":pth}

        for i in range(1, len(pjts)+1):
            self.dlg.projects_combobox.addItem(pjts[str(i)]["PROJECT"],pjts[str(i)]["PATH"])

    def set_project_output(self):
        self.dlg.output.setStyleSheet("")
        index = self.dlg.projects_combobox.currentIndex()
        if index != 0:
            pth = self.dlg.projects_combobox.itemData(index)
            self.dlg.output.setText(pth)
        else:
            self.dlg.output.clear()

    def select_output(self):
        self.dlg.output.setStyleSheet("")
        path = str(QFileDialog.getExistingDirectory(self.dlg, "Seleccionar carpeta"))
        if path != "":
            self.dlg.output.setText(path+"/")

    def __about(self):
        self.dlg2.show()

    def set_message(self, title, text, tipo, error=None):
        msjBox = QMessageBox()
        msjBox.setIcon(tipo)
        msjBox.setText(text)
        msjBox.setInformativeText("")
        msjBox.setWindowTitle(title)
        if error != None:
            msjBox.setDetailedText(error)
        msjBox.setStandardButtons(QMessageBox.Ok)
        msjBox.exec_()

    def clear_inputs(self):
        comboboxes = [self.dlg.origin_combobox, self.dlg.id_origin_combobox, self.dlg.field_origin_combobox,
                      self.dlg.dest_combobox, self.dlg.id_dest_combobox, self.dlg.field_dest_combobox]

        for combobox in comboboxes:
            if combobox.currentIndex() != -1:
                combobox.setStyleSheet("")

    def validate_inputs(self):
        comboboxes = [self.dlg.origin_combobox, self.dlg.id_origin_combobox, self.dlg.field_origin_combobox,
                      self.dlg.dest_combobox, self.dlg.id_dest_combobox, self.dlg.field_dest_combobox]
        flags = [False]*6
        for i, combobox in enumerate(comboboxes):
            if combobox.currentIndex() == -1:
                combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                flags[i] = True
        if all(flags):
            self.dlg.tabWidget.setTabEnabled(1,True)
            self.dlg.tabWidget.setCurrentIndex(self.dlg.tabWidget.currentIndex()+1)
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    def clear_restrictions(self):
        comboboxes = [self.dlg.filt_combobox, self.dlg.measure_combobox, self.dlg.tipo_filt_dist, self.dlg.tipo_filt_fluj]

        for combobox in comboboxes:
            if combobox.currentIndex() != 0:
                combobox.setStyleSheet("")

        lines = [self.dlg.friction_distance, self.dlg.val1_dist, self.dlg.val2_dist, self.dlg.val1_fluj, self.dlg.val2_fluj]

        for line in lines:
            if line.text() != "":
                line.setStyleSheet("")

    def validate_restrictions(self):
        flag1, flag3, flag4, flag5 = False, False, False, False

        if self.dlg.filt_combobox.currentIndex() == 0:
            self.dlg.filt_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag3 = True

        if self.dlg.measure_combobox.currentIndex() == 0:
            self.dlg.measure_combobox.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag4 = True

        if self.dlg.friction_distance.text() == "":
            self.dlg.friction_distance.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        else:
            flag5 = True

        # Origin restriction
        if self.dlg.filt_combobox.currentIndex() == 1:
            if self.dlg.tipo_filt_dist.currentIndex() == 0:
                self.dlg.tipo_filt_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_dist.currentIndex() == 1 or self.dlg.tipo_filt_dist.currentIndex() == 2:
                    if self.dlg.val1_dist.text() == "":
                        self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        flag1 = True
                elif self.dlg.tipo_filt_dist.currentIndex() == 3:
                    if self.dlg.val1_dist.text() != "" and self.dlg.val2_dist.text() != "":
                        try:
                            if float(self.dlg.val1_dist.text()) < float(self.dlg.val2_dist.text()):
                                flag1 = True
                            else:
                                self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_dist.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_dist.text() == "":
                            self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_dist.text() == "":
                            self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

        # Dest Restriction
        elif self.dlg.filt_combobox.currentIndex() == 2:
            if self.dlg.tipo_filt_fluj.currentIndex() == 0:
                self.dlg.tipo_filt_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_fluj.currentIndex() == 1 or self.dlg.tipo_filt_fluj.currentIndex() == 2:
                    if self.dlg.val1_fluj.text() == "":
                        self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        flag1 = True
                elif self.dlg.tipo_filt_fluj.currentIndex() == 3:
                    if self.dlg.val1_fluj.text() != "" and self.dlg.val2_fluj.text() != "":
                        try:
                            if float(self.dlg.val1_fluj.text()) < float(self.dlg.val2_fluj.text()):
                                flag1 = True
                            else:
                                self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_fluj.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_fluj.text() == "":
                            self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_fluj.text() == "":
                            self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")


        # Two restrictions
        elif self.dlg.filt_combobox.currentIndex() == 3:
            auxflag1, auxflag2 = False, False
            # rest origin  - Doble
            if self.dlg.tipo_filt_dist.currentIndex() == 0:
                self.dlg.tipo_filt_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_dist.currentIndex() == 1 or self.dlg.tipo_filt_dist.currentIndex() == 2:
                    if self.dlg.val1_dist.text() == "":
                        self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        auxflag1 = True
                elif self.dlg.tipo_filt_dist.currentIndex() == 3:
                    if self.dlg.val1_dist.text() != "" and self.dlg.val2_dist.text() != "":
                        try:
                            if float(self.dlg.val1_dist.text()) < float(self.dlg.val2_dist.text()):
                                auxflag1 = True
                            else:
                                self.dlg.btn_sig2.setEnabled(False)
                                self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_dist.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_dist.text() == "":
                            self.dlg.val1_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_dist.text() == "":
                            self.dlg.val2_dist.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

            # Rest dest- Doble
            if self.dlg.tipo_filt_fluj.currentIndex() == 0:
                self.dlg.tipo_filt_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            else:
                if self.dlg.tipo_filt_fluj.currentIndex() == 1 or self.dlg.tipo_filt_fluj.currentIndex() == 2:
                    if self.dlg.val1_fluj.text() == "":
                        self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                    else:
                        auxflag2 = True
                elif self.dlg.tipo_filt_fluj.currentIndex() == 3:
                    if self.dlg.val1_fluj.text() != "" and self.dlg.val2_fluj.text() != "":
                        try:
                            if float(self.dlg.val1_fluj.text()) < float(self.dlg.val2_fluj.text()):
                                auxflag2 = True
                            else:
                                self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                                self.set_message("Error",f"Se requiere un número mayor al valor inicial: {self.dlg.val1_fluj.text()}", QMessageBox.Critical)
                        except ValueError:
                            pass
                    else:
                        if self.dlg.val1_fluj.text() == "":
                            self.dlg.val1_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
                        if self.dlg.val2_fluj.text() == "":
                            self.dlg.val2_fluj.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

                if auxflag1 and auxflag2:
                    flag1 = True

        if flag1 and flag3 and flag4 and flag5:
            self.dlg.tabWidget.setTabEnabled(2,True)
            self.dlg.tabWidget.setCurrentIndex(self.dlg.tabWidget.currentIndex()+1)
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    def clear_outputs(self):
        flag = False
        checks = [self.dlg.memory_check, self.dlg.sqlite_check, self.dlg.geojson_check, self.dlg.geopackage_check, self.dlg.hd_check]
        for check in checks:
            if check.isChecked() == True:
                flag = True
                break
        if flag:
            for check in checks:
                check.setStyleSheet("")

    def validate_outputs(self):
        checks = [self.dlg.memory_check, self.dlg.sqlite_check, self.dlg.geojson_check, self.dlg.geopackage_check, self.dlg.hd_check]
        aux = []
        flag1, flag2 = False, False
        for check in checks:
            if check.isChecked() == True:
                aux.append(True)
                flag1 = True
                break
        if len(aux) == 0:
            for check in checks:
                check.setStyleSheet("background-color: rgba(255, 107, 107, 150);")

        if self.dlg.output.text() != "":
            flag2 = True
        else:
            self.dlg.output.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
        if flag1 and flag2:
            print("Ejecuta")
        else:
            self.set_message("Error",f"Por favor, completa todos los campos", QMessageBox.Critical)

    # def validate_formats(self):
    #     self.dlg.groupBox_3.setStyleSheet("")
    #     if (
    #             self.dlg.memory_check.isChecked() == True or
    #             self.dlg.sqlite_check.isChecked() == True or
    #             self.dlg.geojson_check.isChecked() == True or
    #             self.dlg.geopackage_check.isChecked() == True or
    #             self.dlg.hd_check.isChecked() == True
    #             ):
    #         self.dlg.btn_aceptar.setEnabled(True)
    #     else:
    #         self.dlg.btn_aceptar.setEnabled(False)
    #         self.dlg.groupBox_3.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
    #         self.set_message("Error","Por favor, selecciona al menos un formato", QMessageBox.Critical)

    # def validate_outputPath(self):
    #     self.dlg.output.setStyleSheet("")
    #     if self.dlg.output.text() != "":
    #         self.flag2 = True
    #     else:
    #         self.dlg.output.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
    #         self.set_message("Error","Por favor, selecciona una carpeta", QMessageBox.Critical)
    #         self.dlg.btn_aceptar.setEnabled(False)



    def get_data(self):
        origin = self.dlg.origin_combobox.currentLayer()
        id_origin = self.dlg.id_dest_combobox.currentField()
        field_origin = self.dlg.field_origin_combobox.currentField()

        dest = self.dlg.dest_combobox.currentLayer()
        id_dist = self.dlg.id_dest_combobox.currentField()
        field_dest = self.dlg.field_dest_combobox.currentField()

        filtro = self.dlg.filt_combobox.currentText()
        measure = self.dlg.measure_combobox.currentText()
        friction_distance = self.dlg.friction_distance.text()

        tipo_filt_dist = self.dlg.tipo_filt_dist.currentText()
        val1_dist = self.dlg.val1_dist.text()
        val2_dist = self.dlg.val2_dist.text()

        tipo_filt_fluj = self.dlg.tipo_filt_fluj.currentText()
        val1_fluj = self.dlg.val1_fluj.text()
        val2_fluj = self.dlg.val2_fluj.text()

        memory_check = self.dlg.memory_check.isChecked()
        sqlite_check = self.dlg.sqlite_check.isChecked()
        sqlite_check_load = self.dlg.sqlite_check_load.isChecked()
        geojson_check = self.dlg.geojson_check.isChecked()
        geojson_check_load = self.dlg.geojson_check_load.isChecked()
        geopackage_check = self.dlg.geopackage_check.isChecked()
        geopackage_check_load = self.dlg.geopackage_check_load.isChecked()
        hd_check = self.dlg.hd_check.isChecked()
        hd_check_load = self.dlg.hd_check_load.isChecked()

        xls_check = self.dlg.xls_check.isChecked()
        ods_check = self.dlg.ods_check.isChecked()
        csv_check = self.dlg.csv_check.isChecked()

        prefijo = self.dlg.prefijo.text()

        output = self.dlg.output.text()

        if not output:
            self.dlg.output.setStyleSheet("background-color: rgba(255, 107, 107, 150);")
            self.set_message("Error","Por favor, selecciona una carpeta", QMessageBox.Critical)

        print(f"origin: {origin}")
        print(f"id_origin: {id_origin}")
        print(f"field_origin: {field_origin}")
        print(f"dest: {dest}")
        print(f"id_dist: {id_dist}")
        print(f"field_dest: {field_dest}")
        print(f"filtro: {filtro}")
        print(f"measure: {measure}")
        print(f"friction_distance: {friction_distance}")
        print(f"tipo_filt_dist: {tipo_filt_dist}")
        print(f"val1_dist: {val1_dist}")
        print(f"val2_dist: {val2_dist}")
        print(f"tipo_filt_fluj: {tipo_filt_fluj}")
        print(f"val1_fluj: {val1_fluj}")
        print(f"val2_fluj: {val2_fluj}")
        print(f"memory_check: {memory_check}")
        print(f"sqlite_check: {sqlite_check}")
        print(f"sqlite_check_load: {sqlite_check_load}")
        print(f"geojson_check: {geojson_check}")
        print(f"geojson_check_load: {geojson_check_load}")
        print(f"geopackage_check: {geopackage_check}")
        print(f"geopackage_check_load: {geopackage_check_load}")
        print(f"hd_check: {hd_check}")
        print(f"hd_check_load: {hd_check_load}")
        print(f"xls_check: {xls_check}")
        print(f"ods_check: {ods_check}")
        print(f"csv_check: {csv_check}")
        print(f"prefijo: {prefijo}")
        print(f"output: {output}")



